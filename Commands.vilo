(All comments will be denoted by "()" and will be written within the parenthesis)

(Variables: )
(ALL Variables names must be in lower case )
(Integer values will be identified by "Deka" then the value)17(010001)
(Chars values will be identified by "Epis" then a letter) 16(010010)
(String values will be identified by "Minyma" then a string)

(Syntax error will be identified by "Koino")

(***List of given registers and their names)

alpha (pointer type only)0(0001)
beta  (pointer type only)1(0010)
(Registers below can hold a string)
gamma 3(0011)
delta 4(0100)
epsilon 5(0101)

(Registers below can hold a letter value)
zeta 6(0110)
eta 7(0111)
theta 8(1000)

(All registers below will hold integer values)
iota 9(1001)
kappa 10(1010)
lambda 11(1011)
mu 12(1100)
sigma 13(1101)
omicron 14(1110)
omega 15(1111)


(Grabs input then stores input in the desired register)
(This command will ask for input and will add it to the desired register)
32(100000)
&Sum (Holds only one register)

(Will be able to add two numbers and will save it in the last register stated)
31(011111)
+Add (First value is either a number or register, Second is a register, Third the register saved in)

(Will be able to sub two numbers and will save it in the last register stated)
30(011110)
-Sub (First value is either a number or register, Second is a register, Third the register saved in)

(Will be able to multiply two numbers and will save it in the last register stated)
29(011101)
*Mult (First value is either a number or register, Second is a register, Third the register saved in)

(Will be able to divide two numbers and will save it in the last register stated)
28(011100)
/Div (First value is either a number or register, Second is a register, Third the register saved in)

(Will be able to take the modulus of two numbers and will save it in the last register stated)
27(011011)
%Mod (First value is either a number or register, Second is a register, Third the register saved in)

(Will be able to raise to the power given of a number and will save it in the last register stated)
26(011010)
^Pow (First value is the base, Second is the power raised, Third the register saved in)

25(011001)
Edo (signifies that there is a command being repeated)

(Loads the value that is in the given register to the accumulator)

~Fortono (First value is where the register will be stored in)

(Stores the value that is in the accumulator into the given register)
24(011000)
#Kryvo (First value is where the register will be stored in)

(Will run though the given instructions followed)
(if the line read in starts with -> it will signify that it is the start/end of the loop)
23(010111)
@Kyklo (First word that will indicate which lines you want to loop on by writing "Edo", Second is for how many iterations of commands wanted)
(Example: @Kyklo Edo 5
          Edo &Sum mu)

(Take in a value from user)
22(010110)
>Ako (First value is where the register will be stored in)

(Displays to the screen what is in the register)
21(010101)
<Lego (First value is where the register will be outputting from)

(Will check if the accumulator has either a negative, positive, or zero value )
20(010100)
?Lykis(First the value your checking against, Second choices for values: Neg 'N' , Pos 'P' , Zero 'Z')

(moves to the desired location to read future commands)
19(010011)
$Alma(Word for where you want to read commands in the list)

(Sets all register values to zero)
18(010010)
|Exa

(Will stop the program)
0(000000)
!Stasi
